# Furima アプリケーション開発ルール

## 1. ディレクトリ構造の基本方針

- **責務の分離**: DDD を採用

## 2. ディレクトリ構成の詳細

### 2.1. 機能ディレクトリ

- **`app`**:
  - **`Application`**: アプリケーション層
    - **`Services`**: ユースケース実装
  - **`Domain`**: ドメイン層（ビジネスロジックの中心）
    - **`*`**: ドメイン名
    - **`Entities`**: エンティティ（ビジネスの主要オブジェクト）
    - **`ValueObjects`**: 値オブジェクト（シンプルな値の表現）
    - **`Repositories`**: データ取得用インターフェース
    - **`Services`**: ドメイン固有のロジック
  - **`Http`**: プレゼンテーション層
    - **`Controllers`**: HTTP リクエスト処理
    - **`Requests`**: 入力検証
  - **`Infrastructure`**: インフラストラクチャ層
    - **`Repositories`**: データアクセス実装
  - **`Model`**: Eloquent モデル（シンプルな DB マッピング）
    - **`Repositories`**: データアクセス実装

## 3. コード品質

### 3.1. コードフォーマット

- **インデント及び改行が整理できているか**: 不要な改行や不適切なインデントが存在しないこと

### 3.2. HTML 構造

- **html のタグ構造が適当か**: 見出しタグが h1 から順番に階層構造になっているか
- **html ファイルにおいて適切なタグ構成になっているか**: div タグの乱用、li や table 等要素に合わせたタグ当て等ができているか

### 3.3. 命名規則

- **id 名**: ローマ字など英単語でないものが使われていないか、意味の伝わる命名になっているか
- **class 名**: ローマ字など英単語でないものが使われていないか、意味の伝わる命名になっているか
- **変数名**: 意味のない命名をしない、ローマ字などの英単語ではないもので命名をしない
- **モデル名**: アッパーキャメル
- **コントローラ名**: アッパーキャメル
- **フォームリクエスト名**: アッパーキャメル
- **マイグレーションファイル名**: スネークケース
- **コーディングファイル名**: アッパーキャメル

### 3.4. インポート管理

- **クラスやファイルの読み込みは必要十分か**: 使用していないクラスやファイルを use で読み込んでいないか
